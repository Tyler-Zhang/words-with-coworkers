name: slack

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

  # Run tests for any PRs.
  pull_request:

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: words_game_slack
  CACHE_DIR: /docker-cache

jobs:
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup github env variables
        run: |
          env

          GIT_SHA=$(git rev-parse --short "$GITHUB_SHA")
          GIT_BRANCH=${GITHUB_REF##*/}

          echo GIT_SHA=$GIT_SHA
          echo GIT_BRANCH=$GIT_BRANCH
          echo ::set-env name=GIT_SHA::$GIT_SHA
          echo ::set-env name=GIT_BRANCH::$GIT_BRANCH

      - name: Load up cache
        uses: actions/cache@v1
        id: docker-cache
        with:
          path: ${{ env.CACHE_DIR }}
          key: docker-cache-${{ env.GIT_BRANCH }}
          restore-keys: |
            docker-cache-master
            docker-cache

      - name: Load saved image
        if: steps.docker-cache.outputs.cache-hit == 'true'
        run: '[ -e "$CACHE_DIR/image" ] && docker load -i "$CACHE_DIR/image"'

      - name: Build image
        working-directory: ./words_game_slack
        run: |
          GIT_SHA=$(git rev-parse --short "$GITHUB_SHA")
          docker build . --file Dockerfile --tag image --cache-from image --build-arg GIT_SHA=$GIT_SHA

          [ ! -d $CACHE_DIR ] && mkdir $CACHE_DIR
          docker save -o $CACHE_DIR/image image

      - name: Log into registry
        if: contains(github.ref, 'master')
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push image
        if: env.GIT_BRANCH == 'master'
        run: |
          IMAGE_ID=${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag image $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
